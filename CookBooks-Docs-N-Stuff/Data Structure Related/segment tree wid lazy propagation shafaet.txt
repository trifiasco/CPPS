struct tree
{
    int prop;
    int sum;
}seg_tree[1000];

void init(int node,int b,int e,int a[])
{
    if(b==e)
    {
        seg_tree[node].sum =a[b];
        return;
    }
    int left= 2*node;
    int right= 2*node +1;
    int mid= (b+e)/2;
    init(left,b,mid,a);
    init(right,mid+1,e,a);
    seg_tree[node].sum= seg_tree[left].sum+seg_tree[right].sum;
}

int query(int node,int b,int e,int i,int j,int carry=0)
{
    if(i>e|| j < b)
        return 0;
    if(b>=i && e<=j)
    {
        return seg_tree[node].sum+carry*(e-b+1);
    }
    int left= 2*node;
    int right= 2*node +1;
    int mid= (b+e)/2;
    int p1=query(left,b,mid,i,j,carry+seg_tree[node].prop);
    int p2=query(right,mid+1,e,i,j,carry+seg_tree[node].prop);
    return p1+p2;
}


void update(int node,int b,int e,int i,int j,int newval)
{
    if(i>e|| j < b)
        return;
    if(b>=i && e<=j)
    {
        seg_tree[node].sum+=(e-b+1)*newval;
        seg_tree[node].prop+=newval;
        return;
    }
    int left= 2*node;
    int right= 2*node +1;
    int mid= (b+e)/2;
    update(left,b,mid,i,j,newval);
    update(right,mid+1,e,i,j,newval);
    seg_tree[node].sum= seg_tree[left].sum+seg_tree[right].sum;
}

int main() {
    //READ("in.txt");
    //WRITE("out.txt");
    int n;
    scanf("%d", &n);
    int a[n+1];
   // int seg_tree[n*3];
    for(int i=1;i<=n;i++)
    {
        scanf("%d", &a[i]);
    }
    init(1,1,n,a);
    for(int i=1;;i++)
    {
        int in,j;
        cin>>in>> j;
        cout<< query(1,1,n,in,j,0)<<endl;
        int up,v;
        cin>>in>> up >> v;
        update(1,1,n,in,up,v);

    }

    return 0;
}