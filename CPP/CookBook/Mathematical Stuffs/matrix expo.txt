struct matrix
{
    ll v[5][5];
    ll row, col; // number of row and column

    matrix()
    {

    }
    matrix(int r,int c)
    {
        row=r;
        col=c;

        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                v[i][j]=0;
            }
        }
    }

};
ll mod;
// multiplies two matrices and returns the result
matrix multiply(matrix a, matrix b)
{
    assert(a.col == b.row);
    matrix r;
    r.row = a.row;
    r.col = b.col;
    for (int i = 0; i < r.row; i++)
    {
        for (int j = 0; j < r.col; j++)
        {
            ll sum = 0;
            for (int k = 0; k < a.col; k++)
            {
                sum += a.v[i][k] * b.v[k][j];
                sum %= mod;
            }
            r.v[i][j] = sum;
        }
    }
    return r;
}
// returns mat^p
string binary(ll p)
{
    string ret = "";
    while (p > 0)
    {
        ret += (p % 2 == 0) ? "0" : "1";
        p /= 2;
    }
    reverse(ret.begin(), ret.end());
    return ret;
}

matrix power(matrix mat, ll p)
{
    string bin = binary(p);
    matrix ret = mat;
    for (int i = 1; i < bin.size(); i++)
    {
        ret = multiply(ret, ret);
        if (bin[i] == '1')
        {
            ret = multiply(ret, mat);
        }
    }
    return ret;
}

/// base mod kora lagte pare.